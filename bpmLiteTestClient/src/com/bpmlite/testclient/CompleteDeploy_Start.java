package com.bpmlite.testclient;

import guard.models.CompleteFormData;

import java.net.URI;

import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.UriBuilder;

import lite.models.ReturnModel;

import org.apache.xmlbeans.XmlException;
import org.testng.Assert;
import org.testng.annotations.Test;

import com.bpmlite.api.ProcessArtifactDocument;
import com.google.gson.Gson;
import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.WebResource;
import com.sun.jersey.api.client.config.ClientConfig;
import com.sun.jersey.api.client.config.DefaultClientConfig;

public class CompleteDeploy_Start {
	
	
	
	
	@Test
	public void testDeploy() throws XmlException
	{
		ProcessArtifactDocument pDoc = ProcessArtifactDocument.Factory.parse(deployData);
		
		ClientConfig config = new DefaultClientConfig();
	    Client client = Client.create(config);
	    WebResource service = client.resource(getBaseURI());
	    //public Response setDetailsWithJsonString(@QueryParam("userId") String userId, @QueryParam("requestId") String requestId,  @QueryParam("action") String action, CompleteFormData completeFormData)
	    ClientResponse  response = service.path("rest").path("deployProcess")
	    										.queryParam("user","root")
	    										.queryParam("password","12345")
	    										.type(MediaType.APPLICATION_JSON)
	    										.post(ClientResponse.class, pDoc.xmlText()); //ret and the data post.
	    
	    if (response.getStatus() != 201) {
			throw new RuntimeException("Failed : HTTP error code : "
			     + response.getStatus());
		}
	    
	    String output = response.getEntity(String.class);
	    System.out.println("Ret: " + output);
	    
	    ReturnModel ret = new Gson().fromJson(output, ReturnModel.class);

	    Assert.assertEquals(ret.isWorked(), true);
	}
	
	
	@Test(dependsOnMethods = {"testDeploy"})
	public void startProcess() throws XmlException
	{	
		sleepMessage("Waiting to start process..");
		ClientConfig config = new DefaultClientConfig();
	    Client client = Client.create(config);
	    WebResource service = client.resource(getBaseURI());
	    //public Response setDetailsWithJsonString(@QueryParam("userId") String userId, @QueryParam("requestId") String requestId,  @QueryParam("action") String action, CompleteFormData completeFormData)
	    ClientResponse  response = service.path("rest").path("startProcess")
	    										.queryParam("user","root")
	    										.queryParam("password","12345")
	    										.queryParam("processName", "testProcess")
	    										.queryParam("version", "1")
	    										.type(MediaType.APPLICATION_JSON)
	    										.post(ClientResponse.class); 
	    
	    if (response.getStatus() != 201) {
			throw new RuntimeException("Failed : HTTP error code : "
			     + response.getStatus());
		}
	    
	    String output = response.getEntity(String.class);
	    System.out.println("Ret: " + output);
	    
	    //ReturnModel ret = JAXB.unmarshal(new StringReader(output), ReturnModel.class);
	    ReturnModel ret = new Gson().fromJson(output, ReturnModel.class);

	   
	    
	    Assert.assertEquals(ret.isWorked(),true);
	}
	
	
	private static void sleepMessage(String message)
	{
		System.out.println(message);
		try {
			Thread.sleep(5000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	private static URI getBaseURI() {
		return UriBuilder.fromUri("http://localhost:8188/bpmLite").build();
	}
	
	//* daft long string
		public static String deployData ="<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n" + 
				"<!--Sample XML file generated by XMLSpy v2012 rel. 2 sp1 (x64) (http://www.altova.com)-->\r\n" + 
				"<ProcessArtifact xsi:schemaLocation=\"http://api.bpmlite.com bpmlite.xsd\" xmlns=\"http://api.bpmlite.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n" + 
				"	<fields>\r\n" + 
				"		<name>TestText</name>\r\n" + 
				"		<type>STRING</type>\r\n" + 
				"		<initalData></initalData>\r\n" + 
				"		<fieldId>1</fieldId>\r\n" + 
				"		<global>false</global>\r\n" + 
				"	</fields>\r\n" + 
				"	<fields>\r\n" + 
				"		<name>IntTest</name>\r\n" + 
				"		<type>INT</type>\r\n" + 
				"		<initalData></initalData>\r\n" + 
				"		<fieldId>2</fieldId>\r\n" + 
				"		<global>false</global>89\r\n" + 
				"	</fields>\r\n" + 
				"	<processData>\r\n" + 
				"		<steps>\r\n" + 
				"			<stepId>0</stepId>\r\n" + 
				"			<stepName>StepOne</stepName>\r\n" + 
				"			<stepType>USER</stepType>\r\n" + 
				"			<participants>\r\n" + 
				"				<userGuid>root</userGuid>\r\n" + 
				"			</participants>\r\n" + 
				"			<fieldData>1</fieldData>\r\n" + 
				"			<fieldData>2</fieldData>\r\n" + 
				"			<nextStepId>1</nextStepId>\r\n" + 
				"		</steps>\r\n" + 
				"		<steps>\r\n" + 
				"			<stepId>1</stepId>\r\n" + 
				"			<stepName>StepTwo</stepName>\r\n" + 
				"			<stepType>USER</stepType>\r\n" + 
				"			<participants>\r\n" + 
				"				<userGuid>admin</userGuid>\r\n" + 
				"			</participants>\r\n" + 
				"			<fieldData>1</fieldData>\r\n" + 
				"			<fieldData>2</fieldData>\r\n" + 
				"			<nextStepId>-1</nextStepId>\r\n" + 
				"		</steps>\r\n" + 
				"		<processName>testProcess</processName>\r\n" + 
				"		<processDescription>Test Process One</processDescription>\r\n" + 
				"		<version>1</version>\r\n" + 
				"		<author>joeh</author>\r\n" + 
				"	</processData>\r\n" + 
				"	<uniqueGuid>123456</uniqueGuid>\r\n" + 
				"</ProcessArtifact>";
		

}
